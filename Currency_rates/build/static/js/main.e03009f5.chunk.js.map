{"version":3,"sources":["Components/Currency.js","Components/Rates.js","App.js","serviceWorker.js","index.js"],"names":["Currency","_this$props$data","this","props","data","base","date","time_last_updated","rates","react_default","a","createElement","className","Component","Rates","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","_this2","result_array","arr_cur","i","length","axios","then","response","result","result_rates","push","GBP","EUR","USD","String","slice","data_arrays","j","setState","catch","err","console","log","_this3","fetchCurrencyData","interval","setInterval","map","currency","src_Components_Currency","key","App","src_Components_Rates","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e03009f5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Currency.css';\n\nclass Currency extends Component {\n\n        render() {\n            var {\n                base,\n                date,\n                time_last_updated,\n                rates,\n            } = this.props.data;\n            return (\n                <li className={\"currency \" + base}>\n                    <p className=\"currency-name\">Name: {base}</p>\n                    <p>Updated: {date} {time_last_updated}</p>\n                    <p className=\"gbp\">GBP: {rates[0]}</p>\n                    <p className=\"eur\">EUR: {rates[1]}</p>\n                    <p className=\"usd\">USD: {rates[2]}</p>\n                </li>\n            );\n        }\n    }\n\n    export default Currency;\n\n","import React, { Component } from 'react';\nimport './Rates.css';\nimport axios from 'axios';\nimport Currency from './Currency'\n\n\nclass Rates extends Component {\n\n        constructor(props) {\n            super(props);\n            this.state = {\n                data: [{\n                        base: \"GBP\",\n                        date: \"\",\n                        time_last_updated: \"\",\n                        rates: [],\n                },\n                {\n                        base: \"EUR\",\n                        date: \"\",\n                        time_last_updated: \"\",\n                        rates: [],\n                },\n                {\n                        base: \"USD\",\n                        date: \"\",\n                        time_last_updated: \"\",\n                        rates: [],\n                },\n                ]\n            };\n        }\n\n        fetchCurrencyData() {\n        var result_array = [];\n        var arr_cur = ['GBP', 'EUR', 'USD'];\n        for (var i = 0; i < arr_cur.length; i++){\n        axios('https://api.exchangerate-api.com/v4/latest/' + arr_cur[i])\n        .then((response) => { \n                var result = response.data;\n                var result_rates = [];\n                result_rates.push(result.rates.GBP);   // replace received data with necessary currency\n                result_rates.push(result.rates.EUR);\n                result_rates.push(result.rates.USD);\n                result.rates = result_rates;\n                result_rates = [];\n                result.time_last_updated = String(result.time_last_updated);   // make time look better\n                result.time_last_updated = result.time_last_updated.slice(0,2) + ':' + result.time_last_updated.slice(2,4) + ':' + result.time_last_updated.slice(4,6);\n                result_array.push(result);    // make array out of object to use 'map' later\n                var data_arrays = this.state.data;  // clone current state\n                for (var j = 0; j < result_array.length; j++){\n                data_arrays[j] = result_array[j];   // update cloned state\n                }\n                this.setState({data: data_arrays});  // update original state\n\n            })\n            .catch(err => console.log(err));\n        }\n    }\n\n        componentDidMount() {\n            \n        this.fetchCurrencyData();\n        this.interval = setInterval(() => this.fetchCurrencyData(), 60 * 1000);\n        }\n\n        render() {\n            var rates = this.state.data.map((currency) =>\n        <Currency data={currency} key={currency.base} />\n            );\n            return (\n                <div className=\"rates-container\">\n                    <ul className=\"rates\">{rates}</ul>\n                    <p></p>\n               </div>\n            );\n        }\n    }\n\n    export default Rates;","import React, { Component } from 'react';\nimport './App.css';\nimport Rates from './Components/Rates.js';\n\n\nclass App extends Component {\n  render() {\n    return (\n              <div className=\"App\">\n                  <div className=\"App-header\">\n                        <h2>Currency Rates</h2>\n                  </div>\n                  <Rates />\n                </div>\n            );\n        }\n    }\n\n    export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}