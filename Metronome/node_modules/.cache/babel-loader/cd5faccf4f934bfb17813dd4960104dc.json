{"ast":null,"code":"var _jsxFileName = \"/Users/artem/Applications/Metronome/src/Metronome.js\";\nimport React, { Component } from 'react';\nimport './Metronome.css';\nimport click1 from './audio/click1.mp3';\nimport click2 from './audio/click2.mp3';\n\nclass Metronome extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleBpmChange = event => {\n      const bpm = event.target.value;\n      this.setState({\n        bpm: bpm\n      });\n    };\n\n    this.startMetronome = () => {\n      if (this.state.playing) {\n        // Stop the timer\n        clearInterval(this.timer);\n        this.setState({\n          playing: false\n        });\n      } else {\n        // Start a timer with the current BPM\n        this.timer = setInterval(this.playClick, 60 / this.state.bpm * 1000);\n        this.setState({\n          count: 0,\n          playing: true // Play a click \"immediately\" (after setState finishes)\n\n        }, this.playClick);\n      }\n    };\n\n    this.playClick = () => {\n      const _this$state = this.state,\n            count = _this$state.count,\n            beatsPerMeasure = _this$state.beatsPerMeasure; // The first beat will have a different sound than the others\n\n      if (count % beatsPerMeasure === 0) {\n        this.click2.play();\n      } else {\n        this.click1.play();\n      } // Keep track of which beat we're on\n\n\n      this.setState(state => ({\n        count: (state.count + 1) % state.beatsPerMeasure\n      }));\n    };\n\n    this.click1 = new Audio(click1);\n    this.click2 = new Audio(click2);\n    this.state = {\n      playing: false,\n      count: 0,\n      bpm: 100,\n      beatsPerMeasure: 4\n    };\n  }\n\n  render() {\n    let _this$state2 = this.state,\n        playing = _this$state2.playing,\n        bpm = _this$state2.bpm;\n    return React.createElement(\"div\", {\n      className: \"metronome\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"bpm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"bpm-value\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, bpm, \" BPM\"), React.createElement(\"input\", {\n      type: \"range\",\n      min: \"60\",\n      max: \"240\",\n      value: bpm,\n      onChange: this.handleBpmChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      className: \"playing\",\n      onClick: this.startMetronome,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, playing ? 'Stop' : 'Start'));\n  }\n\n}\n\nexport default Metronome;","map":{"version":3,"sources":["/Users/artem/Applications/Metronome/src/Metronome.js"],"names":["React","Component","click1","click2","Metronome","constructor","props","handleBpmChange","event","bpm","target","value","setState","startMetronome","state","playing","clearInterval","timer","setInterval","playClick","count","beatsPerMeasure","play","Audio","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Metronome.css';\nimport click1 from './audio/click1.mp3';\nimport click2 from './audio/click2.mp3';\n\nclass Metronome extends Component {\n\tconstructor(props) {\n    super(props);\n    this.click1 = new Audio(click1);\n    this.click2 = new Audio(click2);\n    this.state = {\n      playing: false,\n      count: 0,\n      bpm: 100,\n      beatsPerMeasure: 4\n    };\n  }\n  \t\n  \thandleBpmChange = event => {\n    const bpm = event.target.value;\n    this.setState({ bpm: bpm });\n  }\n  \t\n  \tstartMetronome = () => {\n  if (this.state.playing) {\n    // Stop the timer\n    clearInterval(this.timer);\n    this.setState({\n      playing: false\n    });\n  } else {\n    // Start a timer with the current BPM\n    this.timer = setInterval(\n      this.playClick,\n      (60 / this.state.bpm) * 1000\n    );\n    this.setState(\n      {\n        count: 0,\n        playing: true\n        // Play a click \"immediately\" (after setState finishes)\n      },\n      this.playClick\n    );\n  }\n};\n\n\tplayClick = () => {\n  const { count, beatsPerMeasure } = this.state;\n\n  // The first beat will have a different sound than the others\n  if (count % beatsPerMeasure === 0) {\n    this.click2.play();\n  } else {\n    this.click1.play();\n  }\n\n  // Keep track of which beat we're on\n  this.setState(state => ({\n    count: (state.count + 1) % state.beatsPerMeasure\n  }));\n};\n\n  render() {\n  \tlet { playing, bpm } = this.state;\n\n    return <div className=\"metronome\">\n    \t<div className='bpm'>\n    \t\t<div className='bpm-value'>{bpm} BPM</div>\n    \t\t<input type=\"range\" min=\"60\" max=\"240\" value={bpm} onChange={this.handleBpmChange}/>\n    \t</div>\n    \t<button className=\"playing\" onClick={this.startMetronome}>{playing ? 'Stop' : 'Start'}</button>\n    </div>;\n  }\n}\n\nexport default Metronome;"]},"metadata":{},"sourceType":"module"}