{"ast":null,"code":"var _jsxFileName = \"/Users/artem/Applications/Metronome/src/Metronome.js\";\nimport React, { Component } from 'react';\nimport './Metronome.css';\nimport click1 from './audio/click1.mp3';\nimport click2 from './audio/click2.mp3';\n\nclass Metronome extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleBeatsPerMinuteChange = event => {\n      const beatsPerMinute = event.target.value;\n\n      if (this.state.playing) {\n        // Stop the old timer and start a new one\n        clearInterval(this.timer);\n        this.timer = setInterval(this.playClick, 60 / beatsPerMinute * 1000); // Set the new BPM, and reset the beat counter\n\n        this.setState({\n          count: 0,\n          beatsPerMinute: beatsPerMinute\n        });\n      } else {\n        // Otherwise just update the BPM\n        this.setState({\n          beatsPerMinute\n        });\n      }\n    };\n\n    this.startMetronome = () => {\n      if (this.state.playing) {\n        // Stop the timer\n        clearInterval(this.timer);\n        this.setState({\n          playing: false\n        });\n      } else {\n        // Start a timer with the current BPM\n        this.timer = setInterval(this.playClick, 60 / this.state.beatsPerMinute * 1000);\n        this.setState({\n          count: 0,\n          playing: true // Play a click \"immediately\" (after setState finishes)\n\n        }, this.playClick);\n      }\n    };\n\n    this.playClick = () => {\n      const _this$state = this.state,\n            count = _this$state.count,\n            beatsPerMeasure = _this$state.beatsPerMeasure; // The first beat will have a different sound than the others\n\n      if (count % beatsPerMeasure === 0) {\n        this.click2.play();\n      } else {\n        this.click1.play();\n      } // Keep track of which beat we're on\n\n\n      this.setState(state => ({\n        count: (state.count + 1) % state.beatsPerMeasure\n      }));\n    };\n\n    this.click1 = new Audio(click1);\n    this.click2 = new Audio(click2);\n    this.state = {\n      playing: false,\n      count: 0,\n      beatsPerMinute: 100,\n      beatsPerMeasure: 1\n    };\n  }\n\n  render() {\n    let _this$state2 = this.state,\n        playing = _this$state2.playing,\n        beatsPerMinute = _this$state2.beatsPerMinute;\n    return React.createElement(\"div\", {\n      className: \"metronome\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"bpm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"bpm-value\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, beatsPerMinute, \" Beats Per Minute\"), React.createElement(\"input\", {\n      type: \"range\",\n      min: \"60\",\n      max: \"240\",\n      value: beatsPerMinute,\n      onChange: this.handleBeatsPerMinuteChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"bpm-value\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, beatsPerMeasure, \" Beats Per Measure\"), React.createElement(\"input\", {\n      type: \"range\",\n      min: \"1\",\n      max: \"24\",\n      value: beatsPerMeasure,\n      onChange: this.handleBpmChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      className: \"playing\",\n      onClick: this.startMetronome,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, playing ? 'Stop' : 'Start'));\n  }\n\n}\n\nexport default Metronome;","map":{"version":3,"sources":["/Users/artem/Applications/Metronome/src/Metronome.js"],"names":["React","Component","click1","click2","Metronome","constructor","props","handleBeatsPerMinuteChange","event","beatsPerMinute","target","value","state","playing","clearInterval","timer","setInterval","playClick","setState","count","startMetronome","beatsPerMeasure","play","Audio","render","handleBpmChange"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Metronome.css';\nimport click1 from './audio/click1.mp3';\nimport click2 from './audio/click2.mp3';\n\nclass Metronome extends Component {\n\tconstructor(props) {\n    super(props);\n    this.click1 = new Audio(click1);\n    this.click2 = new Audio(click2);\n    this.state = {\n      playing: false,\n      count: 0,\n      beatsPerMinute: 100,\n      beatsPerMeasure: 1\n    };\n  }\n  \t\n  \thandleBeatsPerMinuteChange = event => {\n    const beatsPerMinute = event.target.value;\n\n    if (this.state.playing) {\n    // Stop the old timer and start a new one\n    clearInterval(this.timer);\n    this.timer = setInterval(this.playClick, (60 / beatsPerMinute) * 1000);\n\n    // Set the new BPM, and reset the beat counter\n    this.setState({\n      count: 0,\n      beatsPerMinute: beatsPerMinute\n    });\n  } else {\n    // Otherwise just update the BPM\n    this.setState({ beatsPerMinute });\n  }\n  }\n  \t\n  \tstartMetronome = () => {\n  if (this.state.playing) {\n    // Stop the timer\n    clearInterval(this.timer);\n    this.setState({\n      playing: false\n    });\n  } else {\n    // Start a timer with the current BPM\n    this.timer = setInterval(\n      this.playClick,\n      (60 / this.state.beatsPerMinute) * 1000\n    );\n    this.setState(\n      {\n        count: 0,\n        playing: true\n        // Play a click \"immediately\" (after setState finishes)\n      },\n      this.playClick\n    );\n  }\n};\n\n\tplayClick = () => {\n  const { count, beatsPerMeasure } = this.state;\n\n  // The first beat will have a different sound than the others\n  if (count % beatsPerMeasure === 0) {\n    this.click2.play();\n  } else {\n    this.click1.play();\n  }\n\n  // Keep track of which beat we're on\n  this.setState(state => ({\n    count: (state.count + 1) % state.beatsPerMeasure\n  }));\n};\n\n  render() {\n  \tlet { playing, beatsPerMinute } = this.state;\n\n    return <div className=\"metronome\">\n    \t<div className='bpm'>\n    \t\t<div className='bpm-value'>{beatsPerMinute} Beats Per Minute</div>\n    \t\t<input type=\"range\" min=\"60\" max=\"240\" value={beatsPerMinute} onChange={this.handleBeatsPerMinuteChange}/>\n\n    \t\t<div className='bpm-value'>{beatsPerMeasure} Beats Per Measure</div>\n    \t\t<input type=\"range\" min=\"1\" max=\"24\" value={beatsPerMeasure} onChange={this.handleBpmChange}/>\n    \t</div>\n    \t<button className=\"playing\" onClick={this.startMetronome}>{playing ? 'Stop' : 'Start'}</button>\n    </div>;\n  }\n}\n\nexport default Metronome;"]},"metadata":{},"sourceType":"module"}