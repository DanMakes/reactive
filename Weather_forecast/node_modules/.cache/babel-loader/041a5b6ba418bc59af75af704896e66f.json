{"ast":null,"code":"var _jsxFileName = \"/Users/artem/Applications/Weather_forecast/src/Days.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport './Days.css';\nimport Day from './Day';\n\nclass Days extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [{\n        date: \"22.05.2019\",\n        symbol: \"Sun\",\n        temperature: '15C'\n      }, {\n        date: \"23.05.2019\",\n        symbol: \"Clouds\",\n        temperature: '25C'\n      }, {\n        date: \"24.05.2019\",\n        symbol: \"Wind\",\n        temperature: '35C'\n      }, {\n        date: \"25.05.2019\",\n        symbol: \"Rain\",\n        temperature: '45C'\n      }, {\n        date: \"26.05.2019\",\n        symbol: \"Snow\",\n        temperature: '55C'\n      }]\n    };\n  }\n\n  fetchWeather() {\n    var results = [];\n    var icon_url = 'http://openweathermap.org/img/w/';\n    var lat = 50.433334;\n    var lon = 30.516666;\n    var url = \"http://api.openweathermap.org/data/2.5/forecast?lat=\" + lat + \"&lon=\" + lon + \"&APPID=47246b58dee8b9eba96fa2308e7d54e2\";\n    axios(url).then(response => {\n      var result = response.data; // get 3 values from result\n\n      results = result.list.map(function (day) {\n        //console.log(day.dt_txt);\n        let dates = () => this.formatDate(day.dt_txt);\n\n        return {\n          date: dates,\n          symbol: icon_url + day.weather[0].icon + '.png',\n          temperature: day.main.temp\n        };\n      }); // write received values to state\n\n      var five_results = [];\n\n      for (var i = 0; i < results.length; i += 8) {\n        five_results.push(results[i]);\n      }\n\n      this.setState({\n        data: five_results\n      });\n      /*var result_rates = []; \n      result_rates.push(result.rates.GBP);   // replace received data with necessary currency\n      result_rates.push(result.rates.EUR);\n      result_rates.push(result.rates.USD);\n      result.rates = result_rates;\n      result_rates = [];\n      result.time_last_updated = String(result.time_last_updated);   // make time look better\n      result.time_last_updated = result.time_last_updated.slice(0,2) + ':' + result.time_last_updated.slice(2,4) + ':' + result.time_last_updated.slice(4,6);\n      result_array.push(result);    // make array out of object to use 'map' later\n      var data_arrays = this.state.data;  // clone current state\n      for (var j = 0; j < result_array.length; j++){\n      data_arrays[j] = result_array[j];   // update cloned state\n      }\n      this.setState({data: data_arrays});  // update original state\n      */\n    }).catch(err => console.log(err));\n  }\n\n  formatDate(date) {\n    console.log(date);\n    return date.slice(8, 10) + '.' + date.lice(5, 7);\n  }\n\n  componentDidMount() {\n    this.fetchWeather();\n    this.interval = setInterval(() => this.fetchWeather(), 60 * 10000);\n  }\n\n  render() {\n    var days = this.state.data.map(day => React.createElement(Day, {\n      data: day,\n      key: day.date,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      className: \"Weather-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"Weather-days\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, days));\n  }\n\n}\n\nexport default Days;","map":{"version":3,"sources":["/Users/artem/Applications/Weather_forecast/src/Days.js"],"names":["React","Component","axios","Day","Days","constructor","props","state","data","date","symbol","temperature","fetchWeather","results","icon_url","lat","lon","url","then","response","result","list","map","day","dates","formatDate","dt_txt","weather","icon","main","temp","five_results","i","length","push","setState","catch","err","console","log","slice","lice","componentDidMount","interval","setInterval","render","days"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport './Days.css';\nimport Day from './Day';\n\nclass Days extends Component {\n  constructor(props) {\n            super(props);\n            this.state = {\n                data: [{\n                        date: \"22.05.2019\",\n                        symbol: \"Sun\",\n                        temperature: '15C',\n                },\n                  {\n                        date: \"23.05.2019\",\n                        symbol: \"Clouds\",\n                        temperature: '25C',\n                },\n                {\n                        date: \"24.05.2019\",\n                        symbol: \"Wind\",\n                        temperature: '35C',\n                },\n                {\n                        date: \"25.05.2019\",\n                        symbol: \"Rain\",\n                        temperature: '45C',\n                },\n                {\n                        date: \"26.05.2019\",\n                        symbol: \"Snow\",\n                        temperature: '55C',\n                },\n                ]\n            };\n        }\n\n   fetchWeather() {\n        var results = [];\n        var icon_url = 'http://openweathermap.org/img/w/';\n        var lat = 50.433334;\n        var lon = 30.516666;\n        var url = \"http://api.openweathermap.org/data/2.5/forecast?lat=\"+ lat + \"&lon=\" + lon + \"&APPID=47246b58dee8b9eba96fa2308e7d54e2\";\n        axios(url)\n        .then((response) => { \n                var result = response.data;\n                // get 3 values from result\n                results = result.list.map(function(day){\n                        //console.log(day.dt_txt);\n                        let dates = () => this.formatDate(day.dt_txt)\n                        return {date: dates,\n                                symbol: icon_url + day.weather[0].icon + '.png',\n                                temperature: day.main.temp,\n                                }\n                    });\n                // write received values to state\n                var five_results = []\n                for (var i = 0; i < results.length; i += 8){\n                    five_results.push(results[i]);\n                }\n                this.setState({data: five_results})\n                /*var result_rates = []; \n                result_rates.push(result.rates.GBP);   // replace received data with necessary currency\n                result_rates.push(result.rates.EUR);\n                result_rates.push(result.rates.USD);\n                result.rates = result_rates;\n                result_rates = [];\n                result.time_last_updated = String(result.time_last_updated);   // make time look better\n                result.time_last_updated = result.time_last_updated.slice(0,2) + ':' + result.time_last_updated.slice(2,4) + ':' + result.time_last_updated.slice(4,6);\n                result_array.push(result);    // make array out of object to use 'map' later\n                var data_arrays = this.state.data;  // clone current state\n                for (var j = 0; j < result_array.length; j++){\n                data_arrays[j] = result_array[j];   // update cloned state\n                }\n                this.setState({data: data_arrays});  // update original state\n                */\n\n            })\n            .catch(err => console.log(err));\n    };\n\n    formatDate(date){\n        console.log(date);\n            return date.slice(8, 10) + '.' + date.lice(5, 7)\n    }\n\n    componentDidMount() {\n            \n        this.fetchWeather();\n        this.interval = setInterval(() => this.fetchWeather(), 60 * 10000);\n  }\n\n   render() {\n   var days = this.state.data.map((day) =>\n        <Day data={day} key={day.date} />\n            );\n\n  return (\n    <div className=\"Weather-container\">\n      <ul className=\"Weather-days\">{days}\n      </ul>\n      </div>\n  );\n}\n}\n\nexport default Days;\n"]},"metadata":{},"sourceType":"module"}