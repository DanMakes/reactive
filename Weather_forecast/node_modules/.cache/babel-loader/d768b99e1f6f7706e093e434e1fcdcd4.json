{"ast":null,"code":"var _jsxFileName = \"/Users/artem/Applications/Weather_forecast/src/Days.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport axios from 'axios';\nimport './Days.css';\nimport Day from './Day';\nimport DayInDetails from './DayInDetails';\n\nclass Days extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [{\n        date: \"Day_1\",\n        symbol: \"Symbol\",\n        temperature: 'Temp'\n      }, {\n        date: \"Day_2\",\n        symbol: \"Symbol\",\n        temperature: 'Temp'\n      }, {\n        date: \"Day_3\",\n        symbol: \"Symbol\",\n        temperature: 'Temp'\n      }, {\n        date: \"Day_4\",\n        symbol: \"Symbol\",\n        temperature: 'Temp'\n      }, {\n        date: \"Day_5\",\n        symbol: \"Symbol\",\n        temperature: 'Temp'\n      }],\n      detailedData: [{\n        date: \"Day\",\n        symbol: \"Symbol\",\n        temperature: 'Temp',\n        time: \"Time\"\n      }],\n      isDetailed: false,\n      // to show detailed information\n      fullWeather: '',\n      // save time and all data at once\n      city: 'Kiev'\n    };\n  }\n\n  fetchWeather() {\n    var results = [];\n    var lat = '';\n    var lon = '';\n    var city = this.state.city;\n    var url = '';\n\n    let geo = require('./geo.json'); // import file with coordinates\n\n\n    if (!geo[city][0]) {\n      console.log(\"Using default city: Kiev\");\n      this.setState({\n        city: 'Kiev'\n      });\n    } else {\n      console.log('Using your city: ' + this.state.city);\n    }\n\n    lat = geo[city][0];\n    lon = geo[city][1];\n    url = \"http://api.openweathermap.org/data/2.5/forecast?lat=\" + lat + \"&lon=\" + lon + \"&APPID=47246b58dee8b9eba96fa2308e7d54e2\";\n    axios(url).then(response => {\n      var result = response.data; // get 3 values from result\n\n      results = result.list.map(function (day) {\n        return {\n          date: formatDate(day.dt_txt),\n          symbol: formatIcon(day.weather[0].icon),\n          temperature: formatTemp(day.main.temp),\n          time: formatTime(day.dt_txt)\n        };\n      });\n      this.setState({\n        fullWeather: results\n      }); // save detailed results\n\n      function formatDate(date) {\n        // return month and day\n        return date.slice(8, 10) + '.' + date.slice(5, 7);\n      }\n\n      function formatIcon(icon) {\n        // return icon image\n        var icon_url = 'http://openweathermap.org/img/w/';\n        return icon_url + icon + '.png';\n      }\n\n      function formatTemp(temp) {\n        // return celcium results\n        return (temp - 273.15).toFixed(1) + ' C';\n      }\n\n      function formatTime(date) {\n        // return time\n        return date.slice(11, 16);\n      } // write received values to state\n\n\n      var five_results = [];\n\n      for (var i = 0; i < results.length; i += 8) {\n        // return 5 results\n        five_results.push(results[i]);\n      }\n\n      this.setState({\n        data: five_results\n      });\n    }).catch(err => console.log(err));\n  }\n\n  componentDidMount() {\n    this.fetchWeather();\n    this.interval = setInterval(() => this.fetchWeather(), 60 * 10000);\n  }\n\n  onDayClick(date) {\n    var resultsDetailed = this.state.fullWeather.filter(function (day) {\n      return day.date === date; // return forecast for clicked day\n    });\n    this.setState({\n      detailedData: resultsDetailed,\n      isDetailed: true\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault(); // Find the text field via the React ref\n\n    const text = ReactDOM.findDOMNode(this.refs.textInput).value.trim();\n    this.setState({\n      city: text\n    }, function () {\n      console.log(this.state.value);\n    });\n    console.log(this.state.city, text); // Clear form\n\n    ReactDOM.findDOMNode(this.refs.textInput).value = '';\n    this.fetchWeather();\n  }\n\n  render() {\n    var days = this.state.data.map(day => React.createElement(Day, {\n      data: day,\n      key: day.date,\n      onClick: () => this.onDayClick(day.date),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }));\n\n    if (this.state.isDetailed) {\n      var detailedDays = this.state.detailedData.map(dayData => React.createElement(DayInDetails, {\n        data: dayData,\n        key: dayData.time,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"city-input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: \"city\",\n      onSubmit: this.handleSubmit.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      ref: \"textInput\",\n      placeholder: \"Type your city and press enter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"city-name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, this.state.city), React.createElement(\"div\", {\n      className: \"Weather-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"Weather-days\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, days), React.createElement(\"ul\", {\n      className: \"Weather-hours\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, this.state.isDetailed ? detailedDays : false)));\n  }\n\n}\n\nexport default Days;","map":{"version":3,"sources":["/Users/artem/Applications/Weather_forecast/src/Days.js"],"names":["React","Component","ReactDOM","BrowserRouter","Router","Route","Link","axios","Day","DayInDetails","Days","constructor","props","state","data","date","symbol","temperature","detailedData","time","isDetailed","fullWeather","city","fetchWeather","results","lat","lon","url","geo","require","console","log","setState","then","response","result","list","map","day","formatDate","dt_txt","formatIcon","weather","icon","formatTemp","main","temp","formatTime","slice","icon_url","toFixed","five_results","i","length","push","catch","err","componentDidMount","interval","setInterval","onDayClick","resultsDetailed","filter","handleSubmit","event","preventDefault","text","findDOMNode","refs","textInput","value","trim","render","days","detailedDays","dayData","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport axios from 'axios';\nimport './Days.css';\nimport Day from './Day';\nimport DayInDetails from './DayInDetails'\n\nclass Days extends Component {\n  constructor(props) {\n            super(props);\n            this.state = {\n                data: [{\n                        date: \"Day_1\",\n                        symbol: \"Symbol\",\n                        temperature: 'Temp',\n                },\n                  {\n                        date: \"Day_2\",\n                        symbol: \"Symbol\",\n                        temperature: 'Temp',\n                },\n                {\n                        date: \"Day_3\",\n                        symbol: \"Symbol\",\n                        temperature: 'Temp',\n                },\n                {\n                        date: \"Day_4\",\n                        symbol: \"Symbol\",\n                        temperature: 'Temp',\n                },\n                {\n                        date: \"Day_5\",\n                        symbol: \"Symbol\",\n                        temperature: 'Temp',\n                },\n                ],\n                detailedData: [{\n                    date: \"Day\",\n                    symbol: \"Symbol\",\n                    temperature: 'Temp',\n                    time: \"Time\",\n                },\n                ],\n                isDetailed: false, // to show detailed information\n                fullWeather: '',  // save time and all data at once\n                city: 'Kiev',\n            };\n        }\n\n   fetchWeather() {\n        var results = [];\n        var lat = '';\n        var lon = '';\n        var city = this.state.city;\n        var url = '';\n        let geo = require('./geo.json');  // import file with coordinates\n        if (!geo[city][0]){\n        console.log(\"Using default city: Kiev\");\n        this.setState({city: 'Kiev'});\n        }\n        else {\n            console.log('Using your city: ' + this.state.city);\n        }\n        lat = geo[city][0];\n        lon = geo[city][1];\n        url = \"http://api.openweathermap.org/data/2.5/forecast?lat=\" + lat + \"&lon=\" + lon + \"&APPID=47246b58dee8b9eba96fa2308e7d54e2\";\n        axios(url)\n        .then((response) => { \n                var result = response.data;\n                // get 3 values from result\n                results = result.list.map(function(day){\n                        return {date: formatDate(day.dt_txt),\n                                symbol: formatIcon(day.weather[0].icon),\n                                temperature: formatTemp(day.main.temp),\n                                time: formatTime(day.dt_txt),\n                                }\n                    });\n                this.setState({fullWeather: results})  // save detailed results\n                function formatDate(date){\n                        // return month and day\n                        return date.slice(8, 10) + '.' + date.slice(5, 7);\n                }\n\n                function formatIcon(icon){\n                     // return icon image\n                    var icon_url = 'http://openweathermap.org/img/w/';\n                    return icon_url + icon + '.png'\n                }\n\n                function formatTemp(temp){\n                     // return celcium results\n                    return (temp - 273.15).toFixed(1) + ' C';\n                }\n\n                function formatTime(date){\n                    // return time\n                    return date.slice(11, 16);\n                }\n\n                // write received values to state\n                var five_results = []\n                for (var i = 0; i < results.length; i += 8){  // return 5 results\n                    five_results.push(results[i]);\n                }\n                this.setState({data: five_results})\n            })\n            .catch(err => console.log(err));\n    };\n\n    componentDidMount() {\n            \n        this.fetchWeather();\n        this.interval = setInterval(() => this.fetchWeather(), 60 * 10000);\n    };\n\n    onDayClick(date) {\n      var resultsDetailed = this.state.fullWeather.filter(function(day){\n                        return day.date === date;   // return forecast for clicked day\n                    });\n      this.setState({detailedData: resultsDetailed, isDetailed: true});\n    };\n\n    handleSubmit(event) {\n    event.preventDefault();\n    // Find the text field via the React ref\n    const text = ReactDOM.findDOMNode(this.refs.textInput).value.trim();        \n    this.setState({city: text}, function () {\n    console.log(this.state.value);});\n    console.log(this.state.city, text);\n    // Clear form\n    ReactDOM.findDOMNode(this.refs.textInput).value = '';\n    this.fetchWeather();\n  }\n\n   render() {\n   var days = this.state.data.map((day) => \n        <Day data={day} key={day.date} onClick={() => this.onDayClick(day.date)}/>\n            );\n   if (this.state.isDetailed){\n   var detailedDays = this.state.detailedData.map((dayData) => \n        <DayInDetails data={dayData} key={dayData.time} />\n            );\n    }\n  return (  \n    <div className=\"container\">\n    <div className=\"city-input\">\n    <form className=\"city\" onSubmit={this.handleSubmit.bind(this)} >\n              <input\n                type=\"text\"\n                ref=\"textInput\"\n                placeholder=\"Type your city and press enter\"\n              />\n            </form> \n        </div>\n    <div className=\"city-name\">{this.state.city}</div>\n    <div className=\"Weather-container\">\n      <ul className=\"Weather-days\">{days}\n      </ul>\n       <ul className=\"Weather-hours\">{this.state.isDetailed ? detailedDays : false}\n      </ul>\n      </div>\n      </div>\n  );\n}\n}\n\nexport default Days;\n"]},"metadata":{},"sourceType":"module"}